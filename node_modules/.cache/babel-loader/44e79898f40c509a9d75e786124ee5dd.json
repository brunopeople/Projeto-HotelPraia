{"ast":null,"code":"var _jsxFileName = \"C:\\\\curso-react\\\\Projeto-HotelPraia\\\\hotelpraia\\\\src\\\\context.js\";\nimport React, { Component } from \"react\";\nimport items from \"./data\";\nimport Client from \"./Contentful\";\nconst RoomContext = React.createContext();\nexport default class RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      laoding: true,\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      console.log(name, value);\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state;\n      let tempRooms = [...rooms]; //transformar os valores \n      // pega os capacity\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); //filtrado pelo tipo, filtrar os quartos pelo tipo\n\n      if (type !== \"all\") {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filtrar pelo capacity, irá filtrar os Quartos com maior capacidade \n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } // filtrar os quartos pelo preço \n\n\n      tempRooms = tempoRooms.filter(room => room.price <= price); //filtrar pelo quartos pelo tamanho\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); //filtrar os cafés da manhã\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } //filtrar quartos que oferecem vaga para pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      }\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  /*  getData = async () =>{\r\n       try {\r\n           let response = await Client.getEntries({\r\n               content_type: \"beachResortRoom\"\r\n           });\r\n           let featuredRooms = rooms.fiter(room => room.featured === true);\r\n           let maxPrice = Math.max(...rooms.map(item.price));\r\n           let maxSize = Math.max(...rooms.map(item => item.size));\r\n           this.setState({\r\n               rooms,\r\n               featureadRooms,\r\n               sortedRooms,\r\n               loading: false,\r\n               //\r\n               price: maxPrice,\r\n               maxPrice,\r\n               maxSize\r\n           });\r\n       } */\n  componentDidMount() {\n    // this.getData();\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true); //\n\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 19\n      }\n    }, this.props.children);\n  }\n\n}\nconst RoomConsumer = RoomContext.Consumer;\nexport { RoomProvider, RoomConsumer, RoomContext };\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 39\n      }\n    })));\n  };\n}","map":{"version":3,"sources":["C:/curso-react/Projeto-HotelPraia/hotelpraia/src/context.js"],"names":["React","Component","items","Client","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","laoding","type","capacity","price","minPrice","maxPrice","minSize","breakfast","pets","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","checked","name","console","log","setState","filterRooms","maxSize","parseInt","filter","tempoRooms","size","componentDidMount","formatData","featured","Math","max","map","item","loading","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport items from \"./data\";\r\nimport Client from \"./Contentful\";\r\n\r\nconst RoomContext = React.createContext();\r\n\r\nexport default class RoomProvider extends Component{\r\n    state = {\r\n        rooms: [],\r\n        sortedRooms: [],\r\n        featuredRooms: [],\r\n        laoding: true,\r\n        type: \"all\",\r\n        capacity: 1,\r\n        price: 0,\r\n        minPrice: 0,\r\n        maxPrice: 0,\r\n        minSize: 0,\r\n        breakfast: false,\r\n        pets: false\r\n    };\r\n   /*  getData = async () =>{\r\n        try {\r\n            let response = await Client.getEntries({\r\n                content_type: \"beachResortRoom\"\r\n            });\r\n            let featuredRooms = rooms.fiter(room => room.featured === true);\r\n            let maxPrice = Math.max(...rooms.map(item.price));\r\n            let maxSize = Math.max(...rooms.map(item => item.size));\r\n            this.setState({\r\n                rooms,\r\n                featureadRooms,\r\n                sortedRooms,\r\n                loading: false,\r\n                //\r\n                price: maxPrice,\r\n                maxPrice,\r\n                maxSize\r\n            });\r\n        } */\r\n\r\n        componentDidMount(){\r\n            // this.getData();\r\n            let rooms = this.formatData(items);\r\n            let featuredRooms = rooms.filter(room => room.featured === true);\r\n            //\r\n\r\n            let maxPrice = Math.max(...rooms.map(item => item.price));\r\n            let maxSize = Math.max(...rooms.map(item => item.size));\r\n            this.setState({\r\n                rooms,\r\n                featuredRooms,\r\n                loading: false,\r\n\r\n                price: maxPrice,\r\n                maxPrice,\r\n                maxSize\r\n            });\r\n        }\r\n\r\n\r\n        formatData(items) {\r\n            let tempItems = items.map(item => {\r\n                let id = item.sys.id;\r\n                let images = item.fields.images.map(image => image.fields.file.url);\r\n\r\n                let room = {...item.fields, images, id};\r\n                return room;\r\n                });\r\n                return tempItems;\r\n             }\r\n             getRoom = slug => {\r\n                let tempRooms = [...this.state.rooms];\r\n                const room = tempRooms.find(room => room.slug === slug);\r\n                return room;\r\n            };\r\n    \r\n            handleChange = event =>{\r\n                const target = event.target;\r\n                const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n                const name = target.name;\r\n                console.log(name, value);\r\n    \r\n                this.setState(\r\n                    {\r\n                        [name]: value\r\n                    },\r\n                    this.filterRooms\r\n                );\r\n            };\r\n    \r\n            filterRooms = () => {\r\n                let{\r\n                    rooms,\r\n                    type,\r\n                    capacity,\r\n                    price,\r\n                    minSize,\r\n                    maxSize,\r\n                    breakfast,\r\n                    pets,\r\n                } = this.state;\r\n    \r\n                let tempRooms = [...rooms];\r\n    \r\n                //transformar os valores \r\n                // pega os capacity\r\n                capacity = parseInt(capacity);\r\n                price = parseInt(price);\r\n    \r\n                //filtrado pelo tipo, filtrar os quartos pelo tipo\r\n                if(type !== \"all\"){\r\n                    tempRooms = tempRooms.filter(room => room.type === type);\r\n                }\r\n    \r\n                //filtrar pelo capacity, irá filtrar os Quartos com maior capacidade \r\n                if(capacity !== 1){\r\n                    tempRooms = tempRooms.filter(room => room.capacity >= capacity);\r\n                }\r\n    \r\n                // filtrar os quartos pelo preço \r\n                tempRooms = tempoRooms.filter(room => room.price <= price);\r\n    \r\n                //filtrar pelo quartos pelo tamanho\r\n                tempRooms = tempRooms.filter( room => room.size >= minSize && room.size <= maxSize);\r\n    \r\n                //filtrar os cafés da manhã\r\n    \r\n                if(breakfast){\r\n                    tempRooms = tempRooms.filter(room => room.breakfast === true);\r\n                }\r\n    \r\n                //filtrar quartos que oferecem vaga para pets\r\n    \r\n                if(pets){\r\n                    tempRooms = tempRooms.filter(room => room.pets === true);\r\n                }\r\n    \r\n                this.setState({\r\n                    sortedRooms: tempRooms\r\n                });\r\n            };\r\n    \r\n            render() {\r\n                return (\r\n                  <RoomContext.Provider\r\n                    value={{\r\n                      ...this.state,\r\n                      getRoom: this.getRoom,\r\n                      handleChange: this.handleChange\r\n                    }}\r\n                  >\r\n                    {this.props.children}\r\n                  </RoomContext.Provider>\r\n                );\r\n              }\r\n            }\r\n    \r\n            const RoomConsumer = RoomContext.Consumer;\r\n    \r\n            export {RoomProvider, RoomConsumer, RoomContext};\r\n    \r\n            export function withRoomConsumer(Component){\r\n                return function ConsumerWrapper(props){\r\n                    return(\r\n                        <RoomConsumer>\r\n                            {value => <Component {...props} context={value} />}\r\n                        </RoomConsumer>\r\n                    );\r\n                };\r\n        }\r\n\r\n    "]},"metadata":{},"sourceType":"module"}